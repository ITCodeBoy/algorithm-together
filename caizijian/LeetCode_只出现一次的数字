
/************************************************************
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
示例 1:[2,2,1] => 1
示例 2:[4,1,2,1,2] => 4
************************************************************/
using System;
using System.Collections;
using System.Collections.Generic;

namespace LeetCode
{
    class Program
    {
        /// <summary>
        /// 牛逼方法：使用与运算符“^”,相同的两数相与为0，0与任何数为任何数。最后的结果即为只出现一次的数
        /// </summary>
        /// <param name="nums"></param>
        /// <returns></returns>
        //public static int Solution(int[] nums)
        //{
        //    int j = 0;
        //    for (int i = 0; i < nums.Length; i++)
        //    {
        //        j = j ^ nums[i];
        //    }
        //    return j;
        //}

        /// <summary>
        /// 一般方法：使用额外空间Dictionary，把数组的元素作为key，然后出现的次数为value，遍历数组，然后再遍历整个Dictionary集合，找出value为1的关键字
        /// </summary>
        /// <param name="nums"></param>
        /// <returns></returns>
        public static int Solution(int[] nums)
        {
            int j = 0;
            Dictionary<int,int> keyValuePairs = new Dictionary<int, int>();
            for(int i = 0; i < nums.Length; i++)
            {
                if (keyValuePairs.ContainsKey(nums[i]))
                {
                    keyValuePairs[nums[i]]++;
                }
                else
                {
                    keyValuePairs.Add(nums[i], 1);
                }
            }
            foreach (KeyValuePair<int,int> keyValue in keyValuePairs)
            {
                if (keyValue.Value == 1)
                {
                    j= keyValue.Key;
                }
            }
            return j;
        }


        static void Main(string[] args)
        {
            int[] a = new int[] { 1,1,2,2,3,3,5,5,8 };
            Console.WriteLine(Solution(a));
            Console.ReadLine();
        }
    }
}
