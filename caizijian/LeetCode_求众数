/************************************************************
求众数
给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。

你可以假设数组是非空的，并且给定的数组总是存在众数。

示例 1:
输入: [3,2,3]
输出: 3

示例 2:
输入: [2,2,1,1,1,2,2]
输出: 2
************************************************************/
using System;
using System.Collections;
using System.Collections.Generic;

namespace LeetCode
{
    class Program
    {
        /// <summary>
        /// 牛逼方法：从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，一直到最后还不为0的就是众数！
        /// </summary>
        /// <param name="nums"></param>
        /// <returns></returns>
        public static int Solution(int[] nums)
        {
            int count = 0;
            int num = nums[0];
            for (int i = 0; i < nums.Length; i++)
            {
                if (num == nums[i])
                {
                    count++;
                }
                else
                {
                    count--;
                    if (count == 0)
                    {
                        num = nums[i];
                        count++;
                    }
                }
            }
            return num;
        }

        /// <summary>
        /// 垃圾方法：使用额外空间Dictionary，把数组的元素作为key，然后出现的次数为value，遍历数组，然后再遍历整个Dictionary集合，找出数valve最高的数键值对。
        /// </summary>
        /// <param name="nums"></param>
        /// <returns></returns>
        //public static int Solution(int[] nums)
        //{
        //    Dictionary<int,int> keyValuePairs = new Dictionary<int, int>();
        //    for(int i = 0; i < nums.Length; i++)
        //    {
        //        if (keyValuePairs.ContainsKey(nums[i]))
        //        {
        //            keyValuePairs[nums[i]]++;
        //        }
        //        else
        //        {
        //            keyValuePairs.Add(nums[i], 1);
        //        }
        //    }

        //    KeyValuePair<int,int> tempKeyValue=new KeyValuePair<int, int>(0,0);

        //    foreach (KeyValuePair<int,int> keyValue in keyValuePairs)
        //    {
        //        if (keyValue.Value> tempKeyValue.Value)
        //            tempKeyValue = keyValue;
        //    }
        //    return tempKeyValue.Key;
        //}


        static void Main(string[] args)
        {
            int[] a = new int[] { 1,1,2,2,3,3,3,3,3,3,5,5,8 };
            Console.WriteLine(Solution(a));
            Console.ReadLine();
        }
    }
}
